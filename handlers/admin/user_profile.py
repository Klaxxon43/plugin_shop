from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from utils.imports import _, State, StatesGroup, Message
from utils.db_init import db
from .admin import admin 

class UserProfileStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_amount = State()

@admin.callback_query(F.data == "admin_user_profile")
async def admin_user_profile_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserProfileStates.waiting_for_user_id)
    await callback.message.edit_text(
        _("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="admin_panel")]
        ])
    )

@admin.message(UserProfileStates.waiting_for_user_id)
async def process_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        user = await db.users.get_user(user_id)
        
        if not user:
            await message.answer(_("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"))
            return
        
        await state.update_data(user_id=user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        history_records = await db.history.get_user_history(user_id, limit=5)
        history_text = _("–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π")
        
        if history_records:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (id, user_id, amount, comment, date)
            history_lines = []
            for record in history_records:
                # –î–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º –ø–æ –∏–Ω–¥–µ–∫—Å—É (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã)
                amount = record[2]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ amount –Ω–∞ 3 –ø–æ–∑–∏—Ü–∏–∏
                comment = record[3] # comment –Ω–∞ 4 –ø–æ–∑–∏—Ü–∏–∏
                date = record[4]    # date –Ω–∞ 5 –ø–æ–∑–∏—Ü–∏–∏
                history_lines.append(f"{date}: {amount}‚ÇΩ - {comment}")
            
            history_text = "\n".join(history_lines)
        
        text = _('''
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

üÜî ID: <code>{user_id}</code>
üë§ –ò–º—è: @{username}
üí∞ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_time}
üö´ –°—Ç–∞—Ç—É—Å: {banned_status}

üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>
{history}
''').format(
            user_id=user['user_id'],
            username=user['username'] or "–Ω–µ—Ç",
            balance=user['balance'],
            reg_time=user['reg_time'],
            banned_status=_("–ó–∞–±–∞–Ω–µ–Ω") if user['is_banned'] else _("–ê–∫—Ç–∏–≤–µ–Ω"),
            history=history_text
        )
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=_("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"), callback_data="add_balance"),
                InlineKeyboardButton(
                    text=_("üö´ –ó–∞–±–∞–Ω–∏—Ç—å") if not user['is_banned'] else _("‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å"),
                    callback_data="toggle_ban"
                )
            ],
            [InlineKeyboardButton(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="admin_panel")]
        ])
        
        await message.answer(text, reply_markup=kb)
        
    except ValueError as e:
        await message.answer(_("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"))
        print(e)

@admin.callback_query(F.data == "add_balance", UserProfileStates.waiting_for_user_id)
async def add_balance_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserProfileStates.waiting_for_amount)
    await callback.message.edit_text(
        _("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="admin_user_profile")]
        ])
    )

@admin.message(UserProfileStates.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        data = await state.get_data()
        user_id = data['user_id']
        await db.users.update_balance(
            user_id=user_id,
            amount=amount,
            comment=_("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        )
        
        await message.answer(
            _("‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ").format(amount=amount),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=_("üë§ –ö –ø—Ä–æ—Ñ–∏–ª—é"), callback_data=f"admin_user_profile")]
            ])
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer(_("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"))

@admin.callback_query(F.data == "toggle_ban", UserProfileStates.waiting_for_user_id)
async def toggle_ban_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']
    user = await db.users.get_user(user_id)
    
    if user['is_banned']:
        await db.users.unban_user(user_id)
        text = _("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω")
    else:
        await db.users.ban_user(user_id)
        text = _("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")
    
    await callback.answer(text, show_alert=True)
    await admin_user_profile_handler(callback, state)