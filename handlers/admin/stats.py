from aiogram.types import CallbackQuery
from aiogram import F
from datetime import datetime, timedelta
from utils.db_init import *
from utils.imports import *

from .admin import admin 

@admin.callback_query(F.data=='admin_stats')
async def admin_stats(callback: CallbackQuery):
    text = "<b>üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_users, ref_users = await db.users.get_all_users()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    async with db.con.cursor() as cur:
        await cur.execute('SELECT COUNT(*), SUM(purchases_count) FROM items')
        items_count, total_purchases = await cur.fetchone()
        
        await cur.execute('SELECT SUM(amount) FROM history WHERE amount > 0')
        total_income = (await cur.fetchone())[0] or 0
        
        await cur.execute('SELECT COUNT(*) FROM deposits WHERE status = "completed"')
        completed_deposits = (await cur.fetchone())[0]
        
        await cur.execute('SELECT COUNT(*) FROM users WHERE is_banned = TRUE')
        banned_users = (await cur.fetchone())[0]
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        today = datetime.now().strftime('%Y-%m-%d')
        await cur.execute('SELECT COUNT(*) FROM users WHERE DATE(reg_time) = ?', (today,))
        new_today = (await cur.fetchone())[0]
        
        week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        await cur.execute('SELECT COUNT(*) FROM users WHERE DATE(reg_time) >= ?', (week_ago,))
        new_week = (await cur.fetchone())[0]
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º
        await cur.execute('SELECT COUNT(*) FROM users WHERE balance > 0')
        with_balance = (await cur.fetchone())[0]
        
        # –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
        await cur.execute('''
            SELECT referrer_id, COUNT(*) as ref_count 
            FROM users 
            WHERE referrer_id IS NOT NULL 
            GROUP BY referrer_id 
            ORDER BY ref_count DESC 
            LIMIT 3
        ''')
        top_referrers = await cur.fetchall()
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        await cur.execute('SELECT SUM(amount) FROM history WHERE amount > 0 AND DATE(date) = ?', (today,))
        today_income = (await cur.fetchone())[0] or 0
        
        await cur.execute('SELECT AVG(amount) FROM history WHERE amount > 0')
        avg_check = (await cur.fetchone())[0] or 0
        
        # –¢–æ–ø –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
        await cur.execute('''
            SELECT user_id, SUM(amount) as total 
            FROM history 
            WHERE amount > 0 
            GROUP BY user_id 
            ORDER BY total DESC 
            LIMIT 3
        ''')
        top_deposits = await cur.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        await cur.execute('''
            SELECT id, name, purchases_count 
            FROM items 
            ORDER BY purchases_count DESC 
            LIMIT 3
        ''')
        top_items = await cur.fetchall()
        
        await cur.execute('SELECT COUNT(*) FROM items WHERE purchases_count = 0')
        no_sales = (await cur.fetchone())[0]
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await cur.execute('''
            SELECT DATE(date) as day, COUNT(*) as count 
            FROM history 
            WHERE date >= date('now', '-7 days') 
            GROUP BY day 
            ORDER BY day DESC
            LIMIT 7
        ''')
        activity_days = await cur.fetchall()
        
        await cur.execute('SELECT COUNT(DISTINCT user_id) FROM history')
        active_users = (await cur.fetchone())[0]
        
        await cur.execute('SELECT COUNT(*) / COUNT(DISTINCT user_id) FROM history')
        avg_actions = (await cur.fetchone())[0] or 0

    async with db.con.cursor() as cur:
        # –û–±—â–∏–π –¥–æ—Ö–æ–¥ (—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã)
        await cur.execute('''
            SELECT SUM(amount) 
            FROM history 
            WHERE amount > 0 AND comment NOT LIKE '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å%'
        ''')
        total_income = (await cur.fetchone())[0] or 0
        
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã (–æ—Ç–¥–µ–ª—å–Ω–æ)
        await cur.execute('''
            SELECT SUM(amount) 
            FROM history 
            WHERE comment LIKE '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å%'
        ''')
        ref_income = (await cur.fetchone())[0] or 0
        
        # –†–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–ª–∞—Ç–µ–∂–∏ –∑–∞ —Ç–æ–≤–∞—Ä—ã)
        await cur.execute('''
            SELECT SUM(amount) 
            FROM history 
            WHERE amount < 0 AND (comment LIKE '–û–ø–ª–∞—Ç–∞%' OR comment LIKE '–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞%')
        ''')
        user_expenses = (await cur.fetchone())[0] or 0  # –ë—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
        
        # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (–¥–æ—Ö–æ–¥—ã –º–∏–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã)
        net_profit = total_income + user_expenses  # user_expenses —É–∂–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
        
        # –î–µ–ø–æ–∑–∏—Ç—ã —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime('%Y-%m-%d')
        await cur.execute('''
            SELECT SUM(amount) 
            FROM history 
            WHERE amount > 0 AND DATE(date) = ? AND comment NOT LIKE '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å%'
        ''', (today,))
        today_income = (await cur.fetchone())[0] or 0
        
        # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –ø–ª–∞—Ç–µ–∂–∞–º)
        await cur.execute('''
            SELECT AVG(amount) 
            FROM history 
            WHERE amount > 0 AND comment NOT LIKE '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å%'
        ''')
        avg_check = (await cur.fetchone())[0] or 0
        
        # –£—Å–ø–µ—à–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã deposits)
        await cur.execute('SELECT COUNT(*) FROM deposits WHERE status = "completed"')
        completed_deposits = (await cur.fetchone())[0]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text += f"""
<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚îú –í—Å–µ–≥–æ: <code>{total_users}</code>
‚îú –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <code>{new_today}</code>
‚îú –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <code>{new_week}</code>
‚îú –° –±–∞–ª–∞–Ω—Å–æ–º: <code>{with_balance}</code>
‚îú –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö: <code>{ref_users}</code> ({ref_users/total_users*100:.1f}%)
‚îî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: <code>{banned_users}</code>

<b>üí∞ –§–∏–Ω–∞–Ω—Å—ã:</b>
‚îú –û–±—â–∏–π –¥–æ—Ö–æ–¥: <code>{total_income:.2f}‚ÇΩ</code>
‚îú –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: <code>{ref_income:.2f}‚ÇΩ</code>
‚îú –†–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{-user_expenses:.2f}‚ÇΩ</code>
‚îú –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <code>{net_profit:.2f}‚ÇΩ</code>
‚îú –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–æ—Ö–æ–¥: <code>{today_income:.2f}‚ÇΩ</code>
‚îú –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <code>{avg_check:.2f}‚ÇΩ</code>
‚îî –£—Å–ø–µ—à–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: <code>{completed_deposits}</code>

<b>üõçÔ∏è –¢–æ–≤–∞—Ä—ã:</b>
‚îú –í—Å–µ–≥–æ: <code>{items_count}</code>
‚îú –ë–µ–∑ –ø—Ä–æ–¥–∞–∂: <code>{no_sales}</code>
‚îî –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: <code>{total_purchases}</code>

<b>üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚îú –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: <code>{active_users}</code>
‚îî –°—Ä–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–π: <code>{avg_actions:.1f}</code>
"""

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø—ã
    text += "\n<b>üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:</b>\n"
    if top_referrers:
        for i, (ref_id, count) in enumerate(top_referrers, 1):
            text += f"{i}. <a href='tg://user?id={ref_id}'>ID{ref_id}</a> - <code>{count}</code>\n"
    else:
        text += "‚îî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    text += "\n<b>üèÖ –¢–æ–ø –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b>\n"
    if top_deposits:
        for i, (user_id, amount) in enumerate(top_deposits, 1):
            text += f"{i}. <a href='tg://user?id={user_id}'>ID{user_id}</a> - <code>{amount:.2f}‚ÇΩ</code>\n"
    else:
        text += "‚îî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    text += "\n<b>üî• –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
    if top_items:
        for i, (item_id, name, count) in enumerate(top_items, 1):
            text += f"{i}. {name} - <code>{count}</code> –ø–æ–∫—É–ø–æ–∫\n"
    else:
        text += "‚îî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ 7 –¥–Ω–µ–π
    text += "\n<b>üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:</b>\n"
    if activity_days:
        for day, count in activity_days:
            text += f"‚îú {day}: <code>{count}</code>\n"
    else:
        text += "‚îî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats"),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"),
        ] 
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)