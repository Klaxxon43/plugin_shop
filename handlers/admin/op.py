from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import StatesGroup, State
from utils.imports import _ 
from database.create import DataBase
from utils.db_init import db
from aiogram import Bot

from .admin import admin 

@admin.callback_query(F.data == "admin_op")
async def admin_op_handler(callback: types.CallbackQuery, bot: Bot):
    try:
        op_channels = await db.op.get_op_channels()
        
        kb = InlineKeyboardBuilder()
        
        for channel in op_channels:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ channel —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏
                if not all(key in channel for key in ['id', 'channel_id']):
                    continue
                    
                chat = await bot.get_chat(channel['channel_id'])
                button_text = f"–ö–∞–Ω–∞–ª: {chat.title}" if hasattr(chat, 'title') else f"–ß–∞—Ç ID: {chat.id}"
                kb.add(InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"edit_op_{channel['id']}"
                ))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞: {e}")
                kb.add(InlineKeyboardButton(
                    text=f"–ö–∞–Ω–∞–ª ID: {channel['id']}",
                    callback_data=f"edit_op_{channel['id']}"
                ))
        
        kb.add(InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –û–ü",
            callback_data="add_op"
        ))
        
        kb.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="admin_panel"
        ))
        
        kb.adjust(1)
        
        await callback.message.edit_text(
            "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –û–ü –∫–∞–Ω–∞–ª–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ admin_op_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@admin.callback_query(F.data.startswith("edit_op_"))
async def edit_op_handler(callback: types.CallbackQuery, bot: Bot):
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID
        parts = callback.data.split('_')
        if len(parts) < 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
            
        channel_id = int(parts[2])
        channel = await get_channel_by_id(channel_id)
        
        if not channel:
            await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É",
            callback_data=f"change_op_url_{channel_id}"
        ))
        kb.add(InlineKeyboardButton(
            text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª",
            callback_data=f"delete_op_{channel_id}"
        ))
        kb.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="admin_op"
        ))
        kb.adjust(1)
        chat = await bot.get_chat(channel['channel_id'])
        await callback.message.edit_text(
            f"<b>üõ† –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n<b>ID:</b> <code>{channel['id']}</code>\n<b>–°—Å—ã–ª–∫–∞:</b> <code>@{chat.username}</code>",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ edit_op_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@admin.callback_query(F.data.startswith("delete_op_"))
async def delete_op_handler(callback: types.CallbackQuery):
    try:
        parts = callback.data.split('_')
        if len(parts) < 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
            
        channel_id = int(parts[2])
        
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(
            text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
            callback_data=f"confirm_delete_op_{channel_id}"
        ))
        kb.add(InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
            callback_data=f"edit_op_{channel_id}"
        ))
        
        await callback.message.edit_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª?",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ delete_op_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@admin.callback_query(F.data.startswith("confirm_delete_op_"))
async def confirm_delete_op_handler(callback: types.CallbackQuery, bot: Bot):
    try:
        parts = callback.data.split('_')
        if len(parts) < 4:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
            
        channel_id = int(parts[3])
        channel = await get_channel_by_id(channel_id)
        
        if not channel:
            await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        await db.op.remove_op_channel(channel['channel_id'])
        await callback.answer("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω!", show_alert=True)
        await admin_op_handler(callback, bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ confirm_delete_op_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

async def get_channel_by_id(channel_id: int):
    try:
        op_channels = await db.op.get_op_channels()
        for channel in op_channels:
            if isinstance(channel, dict) and channel.get('id') == channel_id:
                return channel
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_channel_by_id: {e}")
        return None
    
from aiogram.fsm.state import StatesGroup, State

class ChangeOpStates(StatesGroup):
    waiting_for_url = State()

@admin.callback_query(F.data.startswith("change_op_url_"))
async def change_op_url_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split('_')
        if len(parts) < 4:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        channel_id = int(parts[3])
        channel = await get_channel_by_id(channel_id)

        if not channel:
            await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        await state.set_state(ChangeOpStates.waiting_for_url)
        await state.update_data(channel_id=channel_id, old_url=channel['channel_id'])

        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_op_{channel_id}"))
        
        await callback.message.edit_text(
            "üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä @channelname –∏–ª–∏ https://t.me/channelname):",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ change_op_url_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@admin.message(ChangeOpStates.waiting_for_url)
async def process_new_op_url(message: types.Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        channel_id = data.get("channel_id")
        old_url = data.get("old_url")
        input_text = message.text.strip()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–ª–∏ ID –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫
        if input_text.startswith("https://t.me/"):
            channel_ref = input_text.split("https://t.me/")[1].split("/")[0]
        elif input_text.startswith("@"):
            channel_ref = input_text[1:]
        else:
            channel_ref = input_text.lstrip("@")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        try:
            chat = await bot.get_chat(f"@{channel_ref}" if not channel_ref.lstrip("-").isdigit() else channel_ref)
            new_channel_id = str(chat.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ
            try:
                bot_member = await bot.get_chat_member(chat.id, bot.id)
                if bot_member.status not in ['administrator', 'creator']:
                    await message.answer("‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                    return
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞: {e}")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î (—Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞)
            await db.op.update_channel_url(channel_id, new_channel_id)
            kb = InlineKeyboardBuilder() 
            kb.button(text='–ù–∞–∑–∞–¥', callback_data=f'edit_op_{new_channel_id}')
            
            await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                               f"–ù–æ–≤—ã–π ID: <code>{new_channel_id}</code>\n"
                               f"Username: @{chat.username}" if chat.username else f"ID: {chat.id}", reply_markup=kb.as_markup())
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")

        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_new_op_url: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")
        await state.clear()


@admin.callback_query(F.data == "add_op")
async def add_op_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state("waiting_for_op_url")
    await callback.message.edit_text(
        _("üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –û–ü –∫–∞–Ω–∞–ª–∞</b>\n\n"
          "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
          "<code>@username</code> –∏–ª–∏ <code>https://t.me/username</code>\n\n"
          "‚ùï –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!"),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_op")
        ]])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –û–ü
@admin.message(F.text, StateFilter("waiting_for_op_url"))
async def process_op_url(message: types.Message, state: FSMContext, bot: Bot):
    url = message.text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
    if url.startswith("https://t.me/"):
        channel_id = url.split("https://t.me/")[1].split("/")[0]
    elif url.startswith("@"):
        channel_id = url[1:]
    else:
        channel_id = url

    try:
        chat = await bot.get_chat(f"@{channel_id}")
        channel_username = channel_id
        channel_id = chat.id
    except:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –ë–î
    await db.op.add_op_channel(channel_id) 
    await state.clear()
    
    await message.answer(f"‚úÖ –û–ü –∫–∞–Ω–∞–ª @{channel_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ ID
async def get_channel_by_id(channel_id: int):
    op_channels = await db.op.get_op_channels()
    for channel in op_channels:
        if channel['id'] == channel_id:
            return channel
    return None