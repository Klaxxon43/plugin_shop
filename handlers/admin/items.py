from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext, StorageKey
from aiogram.types import InlineKeyboardButton, Message, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.state import State, StatesGroup

import uuid
import os
from datetime import datetime

from utils.imports import _, Bot, logger
from utils.db_init import *
from database.create import DataBase
from utils.config_loader import config

from .admin import admin 

class AddItemStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_category = State()
    waiting_for_instruction = State()
    waiting_for_file = State()
    waiting_for_photo = State()

@admin.callback_query(F.data == "admin_items")
async def admin_items_handler(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text=_("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), callback_data="add_item")
    kb.button(text=_("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä"), callback_data="edit_items")
    kb.button(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="admin_panel")
    kb.adjust(1)

    try:
        # First try to edit the message
        await callback.message.edit_text(_("<b>üõç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>"), reply_markup=kb.as_markup())
    except:
        try:
            # If editing fails, try to delete the original message
            await callback.message.delete()
        except:
            pass  # If deletion also fails, just ignore
        # Then send a new message
        await callback.message.answer(_("<b>üõç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>"), reply_markup=kb.as_markup())

@admin.callback_query(F.data == "add_item")
async def add_item_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddItemStates.waiting_for_name)
    kb=InlineKeyboardBuilder()
    kb.button(text=_("üîô –û—Ç–º–µ–Ω–∞"), callback_data="admin_items")
    await callback.message.edit_text(
        _("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"),
        reply_markup=kb.as_markup()
    )

@admin.message(AddItemStates.waiting_for_name)
async def process_item_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddItemStates.waiting_for_description)
    kb = InlineKeyboardBuilder()
    kb.button(text=_("üîô –û—Ç–º–µ–Ω–∞"), callback_data="admin_items")
    await message.answer(
        _("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"),
        reply_markup=kb.as_markup()
    )

@admin.message(AddItemStates.waiting_for_description)
async def process_item_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddItemStates.waiting_for_price)
    kb = InlineKeyboardBuilder()
    kb.button(text=_("üîô –û—Ç–º–µ–Ω–∞"), callback_data="admin_items")
    await message.answer(
        _("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"),
        reply_markup=kb.as_markup()
    )

# @admin.message(AddItemStates.waiting_for_price)
# async def process_item_price(message: Message, state: FSMContext):
#     try:
#         price = float(message.text)
#         if price <= 0:
#             raise ValueError
#         await state.update_data(price=price)
#         await state.set_state(AddItemStates.waiting_for_category)
#         kb = InlineKeyboardBuilder()
#         kb.button(text=_("üîô –û—Ç–º–µ–Ω–∞"), callback_data="admin_items")
#         await message.answer(
#             _("üìÇ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–ª–∞–≥–∏–Ω—ã', '–°–∫—Ä–∏–ø—Ç—ã'):"),
#             reply_markup=kb.as_markup()
#         )
#     except ValueError:
#         await message.answer(_("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:"))

@admin.message(AddItemStates.waiting_for_price)
async def process_item_category(message: Message, state: FSMContext):
    price = float(message.text)
    if price <= 0:
        raise ValueError
    await state.update_data(price=price)
    await state.set_state(AddItemStates.waiting_for_instruction)
    kb = InlineKeyboardBuilder()
    kb.button(text=_("üîô –û—Ç–º–µ–Ω–∞"), callback_data="admin_items")
    await message.answer(
        _("üìÑ –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"),
        reply_markup=kb.as_markup()
    )

@admin.message(AddItemStates.waiting_for_instruction)
async def process_item_instruction(message: Message, state: FSMContext):
    instruction = message.text if message.text != '-' else None
    await state.update_data(instruction=instruction)
    await state.set_state(AddItemStates.waiting_for_file)
    kb = InlineKeyboardBuilder()
    kb.button(text=_("üîô –û—Ç–º–µ–Ω–∞"), callback_data="admin_items")
    await message.answer(
        _("üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞ (–∞—Ä—Ö–∏–≤ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª):"),
        reply_markup=kb.as_markup()
    )

@admin.message(AddItemStates.waiting_for_file, F.document)
async def process_item_file(message: Message, state: FSMContext, bot: Bot):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_ext = file.file_path.split('.')[-1]
    file_path = f"plugins/plugin_{uuid.uuid4()}.{file_ext}"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("plugins", exist_ok=True)
    await bot.download_file(file.file_path, file_path)
    
    await state.update_data(file_path=file_path)
    await state.set_state(AddItemStates.waiting_for_photo)
    
    kb = InlineKeyboardBuilder()
    kb.button(text=_("üîô –û—Ç–º–µ–Ω–∞"), callback_data="admin_items")
    kb.button(text=_("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), callback_data="skip_photo")
    
    await message.answer(
        _("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"),
        reply_markup=kb.as_markup()
    )

@admin.callback_query(F.data == "skip_photo", AddItemStates.waiting_for_photo)
async def skip_photo(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await db.items.add_item(
        name=data['name'],
        description=data['description'],
        price=data['price'],
        instruction=data.get('instruction'),
        file_path=data['file_path'],
        photo_path=None
    )
    
    await state.clear()
    await callback.message.answer(_("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ —Ñ–æ—Ç–æ!"))
    await admin_items_handler(callback)

@admin.message(AddItemStates.waiting_for_photo, F.photo)
async def process_item_photo(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    photo = await bot.get_file(photo_id)
    photo_ext = photo.file_path.split('.')[-1]
    photo_path = f"photos/photo_{uuid.uuid4()}.{photo_ext}"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("photos", exist_ok=True)
    await bot.download_file(photo.file_path, photo_path)
    
    await db.items.add_item(
        name=data['name'],
        description=data['description'],
        price=data['price'],
        instruction=data.get('instruction'),
        file_path=data['file_path'],
        photo_path=photo_path
    )
    
    await state.clear()
    await message.answer(_("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ñ–æ—Ç–æ!"))
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
    kb = InlineKeyboardBuilder()
    kb.button(text=_("üõç –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏"), callback_data="admin_items")
    await message.answer(
        _("–ß—Ç–æ –¥–∞–ª—å—à–µ?"),
        reply_markup=kb.as_markup()
    )

async def process_purchase_with_referral(user_id: int, amount: float, item_id: int, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    :param user_id: ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    :param amount: –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏
    :param item_id: ID —Ç–æ–≤–∞—Ä–∞
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    referrer_id = await db.users.get_referrer(user_id)
    
    if referrer_id:
        # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å (15% –æ—Ç —Å—É–º–º—ã)
        ref_bonus = round(amount * (float(config.ref_percent) / 100), 2)
        
        # 3. –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        await db.users.update_balance(
            referrer_id,
            ref_bonus,
            f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ {item_id}",
            operation_type="ref_bonus",
            item_id=item_id
        )
        
        # 4. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        try:
            await bot.send_message(
                referrer_id,
                _("üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {bonus}‚ÇΩ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!").format(bonus=ref_bonus)
            )
        except:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    # 5. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
    await db.items.increment_purchases(item_id)
    await db.history.add_record(
        user_id=user_id,
        amount=-amount,
        comment=f"–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ {item_id}",
        operation_type="purchase",
        item_id=item_id
    )

class EditItemStates(StatesGroup):
    waiting_for_item_select = State()
    waiting_for_new_name = State()
    waiting_for_new_description = State()
    waiting_for_new_price = State()
    waiting_for_new_instruction = State()
    waiting_for_new_file = State()
    waiting_for_new_photo = State()

@admin.callback_query(F.data == "edit_items")
async def edit_items_start(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã
    items = await db.items.get_all_items()
    
    if not items:
        await callback.answer(_("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"), show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    kb = InlineKeyboardBuilder()
    for item in items:
        kb.button(
            text=f"{item['name']} ({item['price']}‚ÇΩ)", 
            callback_data=f"edit_item_{item['id']}"
        )
    
    kb.button(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="admin_items")
    kb.adjust(1)
    
    await callback.message.edit_text(
        _("üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"),
        reply_markup=kb.as_markup()
    )
    await state.set_state(EditItemStates.waiting_for_item_select)

@admin.callback_query(F.data.startswith("edit_item_"), EditItemStates.waiting_for_item_select)
async def edit_item_selected(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ item_id
        parts = callback.data.split("_")
        if len(parts) < 3 or not parts[2].isdigit():
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        item_id = int(parts[2])
        item = await db.items.get_item(item_id)
        if not item:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        await state.update_data(item_id=item_id, current_item=item)
        await show_item_edit_menu(callback, item)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def show_item_edit_menu(callback: types.CallbackQuery, item: dict, is_new_message: bool = False):
    text = _('''
üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:</b>

üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}
üí∞ <b>–¶–µ–Ω–∞:</b> {price}‚ÇΩ
üìÑ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b> {instruction}
üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {status}
''').format(
        name=item['name'],
        description=item['description'],
        price=item['price'],
        instruction=item.get('instruction', _("–Ω–µ—Ç")),
        status=_("–ê–∫—Ç–∏–≤–µ–Ω") if item.get('is_active', True) else _("–ù–µ–∞–∫—Ç–∏–≤–µ–Ω")
    )

    kb = InlineKeyboardBuilder()
    kb.button(text=_("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"), callback_data="change_name")
    kb.button(text=_("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"), callback_data="change_description")
    kb.button(text=_("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É"), callback_data="change_price")
    kb.button(text=_("üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"), callback_data="change_instruction")
    kb.button(text=_("üìÅ –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª"), callback_data="change_file")
    kb.button(text=_("üñº –û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ"), callback_data="change_photo")
    kb.button(text=_("üì• –í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"), callback_data="download_file")
    
    if item.get('is_active', True):
        kb.button(text=_("‚õîÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"), callback_data="toggle_active")
    else:
        kb.button(text=_("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"), callback_data="toggle_active")
    
    kb.button(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="admin_items")
    kb.adjust(2, 2, 2, 1, 1)

    try:
        if is_new_message:
            if item.get('photo_path'):
                await callback.message.answer_photo(
                    photo=FSInputFile(item['photo_path']),
                    caption=text,
                    reply_markup=kb.as_markup()
                )
            else:
                await callback.message.answer(
                    text=text,
                    reply_markup=kb.as_markup()
                )
        else:
            if item.get('photo_path'):
                try:
                    await callback.message.delete()
                except:
                    pass
                await callback.message.answer_photo(
                    photo=FSInputFile(item['photo_path']),
                    caption=text,
                    reply_markup=kb.as_markup()
                )
            else:
                await callback.message.edit_text(
                    text=text,
                    reply_markup=kb.as_markup()
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é: {e}")
        await callback.message.answer(
            text=text,
            reply_markup=kb.as_markup()
        )


@admin.callback_query(F.data == "change_name")
async def change_name_start(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.set_state(EditItemStates.waiting_for_new_name)
        await callback.message.answer(
            _("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"),
            reply_markup=InlineKeyboardBuilder()
                .button(text=_("üîô –û—Ç–º–µ–Ω–∞"), callback_data="cancel_edit")
                .as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ", show_alert=True)

@admin.message(EditItemStates.waiting_for_new_name)
async def process_new_name(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        item_id = data['item_id']

        await db.items.update_item(item_id, name=message.text)
        item = await db.items.get_item(item_id)
        await state.update_data(current_item=item)

        await message.answer(_("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"))

        # üîß –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è CallbackQuery –≤—Ä—É—á–Ω—É—é –≤—ã–∑—ã–≤–∞–µ–º show_item_edit_menu –Ω–∞–ø—Ä—è–º—É—é
        from aiogram.types import CallbackQuery
        class DummyCallback:
            def __init__(self, message):
                self.message = message

        await show_item_edit_menu(
            DummyCallback(message),  # —ç–º—É–ª—è—Ü–∏—è callback.message
            item,
            is_new_message=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
@admin.callback_query(F.data == "change_description")
async def change_description_start(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.set_state(EditItemStates.waiting_for_new_description)
        await callback.message.answer(
            _("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"),
            reply_markup=InlineKeyboardBuilder()
                .button(text=_("üîô –û—Ç–º–µ–Ω–∞"), callback_data="cancel_edit")
                .as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ", show_alert=True)


@admin.message(EditItemStates.waiting_for_new_description)
async def process_new_description(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        item_id = data['item_id']

        await db.items.update_item(item_id, description=message.text)
        item = await db.items.get_item(item_id)
        await state.update_data(current_item=item)

        await message.answer(_("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"))

        from aiogram.types import CallbackQuery
        class DummyCallback:
            def __init__(self, message):
                self.message = message

        await show_item_edit_menu(
            DummyCallback(message),
            item,
            is_new_message=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
@admin.callback_query(F.data == "change_price")
async def change_price_start(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.set_state(EditItemStates.waiting_for_new_price)
        await callback.message.answer(
            _("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"),
            reply_markup=InlineKeyboardBuilder()
                .button(text=_("üîô –û—Ç–º–µ–Ω–∞"), callback_data="cancel_edit")
                .as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ", show_alert=True)

@admin.message(EditItemStates.waiting_for_new_price)
async def process_new_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError

        data = await state.get_data()
        item_id = data['item_id']

        await db.items.update_item(item_id, price=price)
        item = await db.items.get_item(item_id)
        await state.update_data(current_item=item)

        await message.answer(_("‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"))

        class DummyCallback:
            def __init__(self, message):
                self.message = message

        await show_item_edit_menu(DummyCallback(message), item, is_new_message=True)

    except ValueError:
        await message.answer(_("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:"))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@admin.callback_query(F.data == "change_instruction")
async def change_instruction_start(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.set_state(EditItemStates.waiting_for_new_instruction)
        await callback.message.answer(
            _("üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):"),
            reply_markup=InlineKeyboardBuilder()
                .button(text=_("üîô –û—Ç–º–µ–Ω–∞"), callback_data="cancel_edit")
                .as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ", show_alert=True)

@admin.message(EditItemStates.waiting_for_new_instruction)
async def process_new_instruction(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        item_id = data['item_id']
        instruction = message.text if message.text != '-' else None

        await db.items.update_item(item_id, instruction=instruction)
        item = await db.items.get_item(item_id)
        await state.update_data(current_item=item)

        await message.answer(_("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"))

        class DummyCallback:
            def __init__(self, message):
                self.message = message

        await show_item_edit_menu(DummyCallback(message), item, is_new_message=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
@admin.callback_query(F.data == "change_file")
async def change_file_start(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.set_state(EditItemStates.waiting_for_new_file)
        await callback.message.answer(
            _("üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞ (–∞—Ä—Ö–∏–≤ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª):"),
            reply_markup=InlineKeyboardBuilder()
                .button(text=_("üîô –û—Ç–º–µ–Ω–∞"), callback_data="cancel_edit")
                .as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", show_alert=True)


@admin.message(EditItemStates.waiting_for_new_file, F.document)
async def process_new_file(message: Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        item_id = data['item_id']
        old_item = data['current_item']

        if old_item.get('file_path') and os.path.exists(old_item['file_path']):
            os.remove(old_item['file_path'])

        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_ext = file.file_path.split('.')[-1]
        file_path = f"plugins/plugin_{uuid.uuid4()}.{file_ext}"

        os.makedirs("plugins", exist_ok=True)
        await bot.download_file(file.file_path, file_path)

        await db.items.update_item(item_id, file_path=file_path)
        item = await db.items.get_item(item_id)
        await state.update_data(current_item=item)

        await message.answer(_("‚úÖ –§–∞–π–ª —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"))

        class DummyCallback:
            def __init__(self, message):
                self.message = message

        await show_item_edit_menu(DummyCallback(message), item, is_new_message=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
@admin.callback_query(F.data == "change_photo")
async def change_photo_start(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.set_state(EditItemStates.waiting_for_new_photo)
        await callback.message.answer(
            _("üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):"),
            reply_markup=InlineKeyboardBuilder()
                .button(text=_("üîô –û—Ç–º–µ–Ω–∞"), callback_data="cancel_edit")
                .as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–æ—Ç–æ: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ", show_alert=True)


@admin.message(EditItemStates.waiting_for_new_photo, F.photo)
async def process_new_photo(message: Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        item_id = data['item_id']
        old_item = data['current_item']

        if old_item.get('photo_path') and os.path.exists(old_item['photo_path']):
            os.remove(old_item['photo_path'])

        photo_id = message.photo[-1].file_id
        photo = await bot.get_file(photo_id)
        photo_ext = photo.file_path.split('.')[-1]
        photo_path = f"photos/photo_{uuid.uuid4()}.{photo_ext}"

        os.makedirs("photos", exist_ok=True)
        await bot.download_file(photo.file_path, photo_path)

        await db.items.update_item(item_id, photo_path=photo_path)
        item = await db.items.get_item(item_id)
        await state.update_data(current_item=item)

        await message.answer(_("‚úÖ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"))

        class DummyCallback:
            def __init__(self, message):
                self.message = message

        await show_item_edit_menu(DummyCallback(message), item, is_new_message=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")

# –í—ã–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
@admin.callback_query(F.data == "download_file")
async def download_file_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    item = data['current_item']
    
    if not item.get('file_path') or not os.path.exists(item['file_path']):
        await callback.answer(_("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"), show_alert=True)
        return
    
    try:
        await bot.send_document(
            chat_id=callback.from_user.id,
            document=FSInputFile(item['file_path']),
            caption=_("üì¶ –§–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞: {}").format(item['name'])
        )
        await callback.answer(_("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"), show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await callback.answer(_("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª!"), show_alert=True)

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞
@admin.callback_query(F.data == "toggle_active")
async def toggle_active_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item_id = data['item_id']
    item = data['current_item']
    
    new_status = not item.get('is_active', True)
    await db.items.update_item(item_id, is_active=new_status)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    item['is_active'] = new_status
    await state.update_data(current_item=item)
    
    await callback.answer(
        _("–¢–æ–≤–∞—Ä {}–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω").format("" if new_status else "–¥–µ"),
        show_alert=False
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    await show_item_edit_menu(callback, item)

@admin.callback_query(F.data == "cancel_edit")
async def cancel_edit_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item_id = data['item_id']
    item = data['current_item']
    await state.set_state(EditItemStates.waiting_for_item_select)
    await show_item_edit_menu(callback, item)