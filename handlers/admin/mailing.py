from aiogram import types, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Union, Optional
from utils.imports import *
from utils.db_init import *
from aiogram.filters import StateFilter

from .admin import admin

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def confirm_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_confirm")
    kb.button(text="üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")
    kb.button(text="üìã –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="add_buttons")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_menu")
    kb.adjust(1, 2)
    return kb.as_markup()

def buttons_confirm_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="buttons_confirm")
    kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="edit_buttons")
    kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="no_buttons")
    kb.adjust(1, 2)
    return kb.as_markup()

def back_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_menu")
    return kb.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@admin.callback_query(F.data == "admin_mailing")
async def start_broadcast(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state("get_text")
    await callback.message.edit_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=back_keyboard()
    )

@admin.message(StateFilter("get_text"), F.text)
async def get_broadcast_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer(
        f"üì¢ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{message.text}\n\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏?",
        reply_markup=confirm_keyboard()
    )
    await state.set_state("confirm_content")

@admin.message(StateFilter("get_text"), F.photo)
async def get_broadcast_photo_with_text(message: types.Message, state: FSMContext):
    await state.update_data(
        photo=message.photo[-1].file_id,
        text=message.caption if message.caption else ""
    )
    data = await state.get_data()
    await message.answer_photo(
        photo=data["photo"],
        caption=f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{data['text']}\n\n"
               "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏?",
        reply_markup=confirm_keyboard()
    )
    await state.set_state("confirm_content")

@admin.callback_query(StateFilter("confirm_content"), F.data == "add_photo")
async def add_photo_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=back_keyboard()
    )
    await state.set_state("get_photo")

@admin.message(StateFilter("get_photo"), F.photo)
async def get_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    data = await state.get_data()
    await message.answer_photo(
        photo=data["photo"],
        caption=f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{data.get('text', '')}\n\n"
               "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏?",
        reply_markup=confirm_keyboard()
    )
    await state.set_state("confirm_content")

@admin.callback_query(StateFilter("confirm_content"), F.data == "add_buttons")
async def add_buttons_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        await callback.message.delete()
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏1 - URL1\n"
        "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏2 - URL2\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ù–∞—à —Å–∞–π—Ç - https://example.com\n"
        "Telegram - https://t.me/example",
        reply_markup=back_keyboard()
    )
    await state.set_state("get_buttons")

@admin.message(StateFilter("get_buttons"), F.text)
async def get_buttons(message: types.Message, state: FSMContext):
    buttons = []
    for line in message.text.split('\n'):
        if ' - ' in line:
            text, url = line.split(' - ', 1)
            buttons.append((text.strip(), url.strip()))
    
    if not buttons:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=back_keyboard())
        return
    
    await state.update_data(buttons=buttons)
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    builder = InlineKeyboardBuilder()
    for text, url in buttons:
        builder.button(text=text, url=url)
    builder.adjust(1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if "photo" in data:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        try:
            await message.delete()
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer_photo(
            photo=data["photo"],
            caption=f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{data.get('text', '')}\n\n"
                   "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫:",
            reply_markup=buttons_confirm_keyboard()
        )
    else:
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        await message.answer(
            f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{data.get('text', '')}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫:",
            reply_markup=buttons_confirm_keyboard()
        )
    
    await state.set_state("confirm_buttons")

@admin.callback_query(StateFilter("confirm_buttons"), F.data == "buttons_confirm")
async def confirm_buttons(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
        reply_markup=confirm_keyboard()
    )
    await state.set_state("confirm_content")

@admin.callback_query(StateFilter("confirm_buttons"), F.data == "no_buttons")
async def no_buttons(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(buttons=None)
    await callback.message.edit_text(
        "–ö–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
        reply_markup=confirm_keyboard()
    )
    await state.set_state("confirm_content")

@admin.callback_query(StateFilter("confirm_content"), F.data == "broadcast_confirm")
async def start_broadcasting(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()
    if "buttons" in data and data["buttons"]:
        for text, url in data["buttons"]:
            builder.button(text=text, url=url)
        builder.adjust(1)
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_menu"))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with db.con.cursor() as cur:
        await cur.execute("SELECT user_id FROM users WHERE is_banned = FALSE")
        users = await cur.fetchall()
    
    success = 0
    errors = 0
    status_msg = await callback.message.answer("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for (user_id,) in users:
        try:
            if "photo" in data:
                await bot.send_photo(
                    chat_id=user_id,
                    photo=data["photo"],
                    caption=data.get("text", ""),
                    reply_markup=builder.as_markup()
                )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=data.get("text", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
                    reply_markup=builder.as_markup()
                )
            success += 1
            await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            
        except Exception as e:
            errors += 1
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user_id}: {str(e)}")
    
    await status_msg.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
        f"‚ñ™Ô∏è –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ñ™Ô∏è –û—à–∏–±–æ–∫: {errors}",
        reply_markup=back_keyboard()
    )
    await state.clear()