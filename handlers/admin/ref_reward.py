from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from configparser import ConfigParser
from utils.imports import _
from utils.imports import *

from .admin import admin

class RefPercentStates(StatesGroup):
    waiting_for_new_percent = State()

class CryptoBotStates(StatesGroup):
    waiting_for_new_token = State()

class AdminStates(StatesGroup):
    waiting_for_new_admins = State()

@admin.message(Command("set_cryptobot_token"))
async def set_cryptobot_token_handler(message: Message, state: FSMContext):
    if message.from_user.id not in map(int, config.get("bot", "admins").split(",")):
        return await message.answer(_("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!"))
    
    await state.set_state(CryptoBotStates.waiting_for_new_token)
    await message.answer(
        _("üîë –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω CryptoBot: {current}\n"
          "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω:").format(
              current=config.get("bot", "cryptobot_token")
          ),
        reply_markup=types.ReplyKeyboardRemove()
    )

@admin.message(CryptoBotStates.waiting_for_new_token, F.text)
async def process_new_token(message: Message, state: FSMContext):
    new_token = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É)
    if len(new_token) < 20:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞
        await message.answer(_("‚ùå –¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω:"))
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    config.set("bot", "cryptobot_token", new_token)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open("config.cfg", "w") as configfile:
        config.write(configfile)
    
    await message.answer(
        _("‚úÖ –¢–æ–∫–µ–Ω CryptoBot —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
          "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞")
    )
    await state.clear()


@admin.message(Command("set_admins"))
async def set_admins_handler(message: Message, state: FSMContext):
    if message.from_user.id not in map(int, config.get("bot", "admins").split(",")):
        return await message.answer(_("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!"))
    
    current_admins = config.get("bot", "admins")
    await state.set_state(AdminStates.waiting_for_new_admins)
    await message.answer(
        _("üë• –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
          "<code>{current}</code>\n\n"
          "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):").format(
              current=current_admins
          ),
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="HTML"
    )

@admin.message(AdminStates.waiting_for_new_admins, F.text)
async def process_new_admins(message: Message, state: FSMContext):
    try:
        new_admins = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        admins_list = [admin_id.strip() for admin_id in new_admins.split(",")]
        for admin_id in admins_list:
            if not admin_id.isdigit():
                raise ValueError
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        config.set("bot", "admins", new_admins)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open("config.cfg", "w") as configfile:
            config.write(configfile)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        admins_list = list(map(int, admins_list))
        
        await message.answer(
            _("‚úÖ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
              "–ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫: <code>{new_admins}</code>").format(
                  new_admins=new_admins
              ),
            parse_mode="HTML"
        )
        await state.clear()
        
    except ValueError:
        await message.answer(_("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"))

@admin.message(Command("set_ref_percent"))
async def set_ref_percent_handler(message: Message, state: FSMContext):
    if message.from_user.id not in map(int, config.get("bot", "admins").split(",")):
        return await message.answer(_("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!"))
    
    await state.set_state(RefPercentStates.waiting_for_new_percent)
    await message.answer(
        _("üìä –¢–µ–∫—É—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {current}%\n"
          "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0-100):").format(
              current=config.getint("bot", "ref_percent")
          ),
        reply_markup=types.ReplyKeyboardRemove()
    )

@admin.message(RefPercentStates.waiting_for_new_percent, F.text)
async def process_new_percent(message: Message, state: FSMContext):
    try:
        new_percent = int(message.text)
        if not 0 <= new_percent <= 100:
            raise ValueError
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        config.set("bot", "ref_percent", str(new_percent))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open("config.cfg", "w") as configfile:
            config.write(configfile)
        
        await message.answer(
            _("‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_percent}%\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞").format(
                new_percent=new_percent
            )
        )
        await state.clear()
        
    except ValueError:
        await message.answer(_("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:"))

