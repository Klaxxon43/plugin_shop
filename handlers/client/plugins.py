from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder

from utils.imports import _
from utils.imports import *
from utils.db_init import *
from utils.config_loader import config
from .menu import router 

@router.callback_query(F.data == "plugins")
async def plugins_handler(callback: types.CallbackQuery, state: FSMContext):
    items = await db.items.get_all_items(page=1, per_page=config.items_per_page)
    
    if not items:
        await callback.message.edit_text(
            _("üß© –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤."),
            reply_markup=back_kb()
        )
        return
    
    builder = InlineKeyboardBuilder()
    for item in items:
        builder.add(InlineKeyboardButton(
            text=f"{item['name']} - {item['price']}‚ÇΩ",
            callback_data=f"plugin_{item['id']}"
        ))
    
    builder.adjust(1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    total_items = len(await db.items.get_all_items())
    if total_items > config.items_per_page:
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="plugins_page_1"),
            InlineKeyboardButton(text="1/1", callback_data="current_page"),
            InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="plugins_page_2")
        )
    
    builder.row(InlineKeyboardButton(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="back_menu"))
    
    await callback.message.edit_text(
        _("üß© <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–≥–∏–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"),
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("plugin_"))
async def plugin_detail_handler(callback: types.CallbackQuery, bot: Bot):
    item_id = int(callback.data.split("_")[1])
    item = await db.items.get_item(item_id)
    
    if not item:
        await callback.answer(_("–ü–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!"), show_alert=True)
        return
    
    text = _('''
üß© <b>{name}</b>

üíµ <b>–¶–µ–Ω–∞:</b> {price}‚ÇΩ
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{description}

üõí <b>–ö—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø–ª–∞–≥–∏–Ω?</b>
''').format(
        name=item['name'],
        price=item['price'],
        description=item['description']
    )
    
    kb = InlineKeyboardBuilder()
    kb.button(text=_("üõí –ö—É–ø–∏—Ç—å"), callback_data=f"buy_{item_id}")
    kb.button(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="plugins")
    kb.adjust(1)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
    if item.get('photo_path'):
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            with open(item['photo_path'], 'rb') as photo:
                await bot.send_photo(
                    chat_id=callback.message.chat.id,
                    photo=types.BufferedInputFile(photo.read(), filename='item_photo.jpg'),
                    caption=text,
                    reply_markup=kb.as_markup()
                )
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(text, reply_markup=kb.as_markup())
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await callback.message.edit_text(text, reply_markup=kb.as_markup())

def back_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="back_menu")
    kb.adjust(1)
    return kb.as_markup()

@router.message(Command("kerfwekfnrewjkprjefjmkwdernjfeklwfnmekjlwrwenkrdfmewklfewjnrmkewjwl"))
async def all_plugins_command(message: types.Message, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    all_items = await db.items.get_all_items()
    
    if not all_items:
        await message.answer(_("üß© –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤."))
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    response_text = _("üß© <b>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n\n")
    
    for item in all_items:
        response_text += _('''
üìå <b>{name}</b> - {price}‚ÇΩ
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}
üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b> {instructions}

''').format(
            name=item['name'],
            price=item['price'],
            description=item.get('description', _("–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")),
            instructions=item.get('instruction', _("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å
    if len(response_text) > 4096:
        for x in range(0, len(response_text), 4096):
            part = response_text[x:x+4096]
            await message.answer(part)
    else:
        await message.answer(response_text)
    
    # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    for item in all_items:
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞
            if item.get('file_path'):
                with open(item['file_path'], 'rb') as file:
                    await bot.send_document(
                        chat_id=message.chat.id,
                        document=types.BufferedInputFile(
                            file.read(),
                            filename=f"{item['name']}"  # –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                        ),
                        caption=_("üì¶ –§–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞: {name}").format(name=item['name'])
                    )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ {item['name']}: {e}")
            await message.answer(
                _("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ {name}").format(name=item['name'])
            )