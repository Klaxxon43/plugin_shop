from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder

from utils.imports import _
from utils.imports import *
from utils.db_init import *
from utils.config_loader import config
import aiohttp

from API.CryptoBotAPI import *

from .menu import router 

@router.callback_query(F.data.startswith("buy_"))
async def plugin_buy_handler(callback: types.CallbackQuery, bot: Bot):
    item_id = int(callback.data.split("_")[1])
    item = await db.items.get_item(item_id)

    kb = InlineKeyboardBuilder()
    kb.button(text='CryptoBot', callback_data=f'pay_cryptobot_{item_id}')
    kb.button(text='RUB', callback_data=f'pay_rub_{item_id}')
    kb.button(text='–ù–∞–∑–∞–¥', callback_data=f'plugin_{item_id}')
    kb.adjust(1)
    await callback.message.delete()
    await callback.message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"), reply_markup=kb.as_markup())


@router.callback_query(F.data.startswith("pay_rub_"))
async def pay_from_cryptobot_handler(callback: types.CallbackQuery, bot: Bot):
    item_id = int(callback.data.split("_")[2])
    kb = InlineKeyboardBuilder()
    kb.button(text='–û–ø–ª–∞—Ç–∏—Ç—å', url='@titleplugins_support')
    kb.button(text='–ù–∞–∑–∞–¥', callback_data=f'buy_{item_id}')
    await callback.message.edit_text('–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É –≤ –ª—Å –∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ä–µ–∫–≤–µ–∑–∏—Ç–∞–º. –î–µ–Ω—å–≥–∏ –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å.')

@router.callback_query(F.data.startswith("pay_cryptobot_"))
async def pay_from_cryptobot_handler(callback: types.CallbackQuery, bot: Bot):
    item_id = int(callback.data.split("_")[2])
    item = await db.items.get_item(item_id)
    user_id = callback.from_user.id
    
    if not item:
        await callback.answer(_("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!"), show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä—Å
    user = await db.users.get_user(user_id)
    balance = user.get('balance', 0)
    item_price = item['price']

    try:
        usd_rate = await get_usd_to_rub_rate()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        usd_rate = 90

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞
    amount_to_pay = item_price
    balance_used = 0

    if balance > 0:
        if balance >= item_price:
            # –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞
            balance_used = item_price
            amount_to_pay = 0
        else:
            # –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞
            balance_used = balance
            amount_to_pay = item_price - balance

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ CryptoBot
    if amount_to_pay > 0:
        amount_usd = round(amount_to_pay / usd_rate, 2)
        invoice = await create_invoice(
            amount=amount_usd,
            user_id=user_id,
            purpose=f'–ü–æ–∫—É–ø–∫–∞ –ø–ª–∞–≥–∏–Ω–∞: {item["name"]}'
        )
        invoice_id = invoice['id']
    else:
        # –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞
        invoice_id = 0
        amount_usd = 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = _(
        "üí≥ <b>{payment_type}</b>\n\n"
        f"üß© <b>–ü–ª–∞–≥–∏–Ω:</b> {item['name']}\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {item_price}‚ÇΩ\n"
    )

    if balance_used > 0:
        message_text += _(
            f"üí≥ <b>–°–ø–∏—à–µ—Ç—Å—è —Å –±–∞–ª–∞–Ω—Å–∞:</b> {balance_used}‚ÇΩ\n"
        )
    
    if amount_to_pay > 0:
        message_text += _(
            f"üíµ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {amount_to_pay}‚ÇΩ (~{amount_usd}$)\n"
            f"üìä <b>–ö—É—Ä—Å:</b> 1$ = {usd_rate}‚ÇΩ\n\n"
            "‚è≥ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —á–µ–∫–∞:</b> 3 –º–∏–Ω—É—Ç—ã\n\n"
        )
    
    if amount_to_pay > 0:
        message_text += _(
            "‚û°Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>'–û–ø–ª–∞—Ç–∏—Ç—å'</b> –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ\n"
            "‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ <b>'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'</b>"
        )
    else:
        message_text += _(
            "‚úÖ –ù–∞–∂–º–∏—Ç–µ <b>'–ü–æ–ª—É—á–∏—Ç—å'</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞"
        )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    payment_type = _("–û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞") if amount_to_pay == 0 else \
                 _("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞") if balance_used > 0 else \
                 _("–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot")

    message_text = message_text.format(payment_type=payment_type)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = InlineKeyboardBuilder()
    
    if amount_to_pay > 0:
        kb.button(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url=invoice['url'])
    
    button_text = 'üîÑ –ü–æ–ª—É—á–∏—Ç—å' if amount_to_pay == 0 else 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å'
    kb.button(
        text=button_text, 
        callback_data=f'confirmPay_{invoice_id}_{item_id}_{balance_used}'
    )
    kb.button(
        text='üîô –ù–∞–∑–∞–¥', 
        callback_data=f'buy_{item_id}'
    )
    kb.adjust(1)

    try:
        await callback.message.edit_text(
            message_text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.message.delete()
        await callback.message.answer(
            message_text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("confirmPay_"))
async def confirm_pay_from_cryptobot_handler(callback: types.CallbackQuery, bot: Bot):
    parts = callback.data.split('_')
    invoice_id = int(parts[1])
    item_id = int(parts[2])
    balance_used = float(parts[3])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    item = await db.items.get_item(item_id)
    if not item:
        await callback.answer(_("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!"), show_alert=True)
        return

    # –î–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    if invoice_id != 0:
        status = await check_payment_status(invoice_id)
        if not status:
            await callback.answer(_("–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"), show_alert=True)
            return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    total_amount = item['price']
    payment_details = []
    
    # –ï—Å–ª–∏ –±—ã–ª–∞ —á–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ - —Å–ø–∏—Å—ã–≤–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    if balance_used > 0:
        await db.users.update_balance(
            user_id, 
            -balance_used, 
            f"–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞: {item['name']}",
            operation_type="purchase",
            item_id=item_id
        )
        payment_details.append(f"–° –±–∞–ª–∞–Ω—Å–∞: {balance_used}‚ÇΩ")
    
    # –ï—Å–ª–∏ –±—ã–ª–∞ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    if invoice_id != 0:
        amount_paid = total_amount - balance_used
        await db.history.add_record(
            user_id=user_id,
            amount=-amount_paid,
            comment=f"–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot –∑–∞ —Ç–æ–≤–∞—Ä: {item['name']}",
            operation_type="purchase",
            service="cryptobot",
            item_id=item_id
        )
        payment_details.append(f"–ß–µ—Ä–µ–∑ CryptoBot: {amount_paid}‚ÇΩ")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    await callback.message.edit_text(_("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ì–æ—Ç–æ–≤–∏–º –≤–∞—à –ø–ª–∞–≥–∏–Ω..."))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–≥–∏–Ω–æ–º
    message_text = _(
        f"üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{item['name']}</code>\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <code>{item['description']}</code>\n"
        f"<b>–°—É–º–º–∞:</b> <code>{total_amount}‚ÇΩ</code>\n"
        f"<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {', '.join(payment_details)}\n\n"
    )

    if item['instruction']:
        message_text += _(
            f"üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:</b>\n"
            f"<code>{item['instruction']}</code>\n\n"
        )

    message_text += _("‚¨áÔ∏è <b>–í–∞—à –ø–ª–∞–≥–∏–Ω –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é –Ω–∏–∂–µ</b> ‚¨áÔ∏è")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    try:
        if item.get('photo_path'):
            await bot.send_photo(
                chat_id=user_id,
                photo=types.FSInputFile(item['photo_path']),
                caption=message_text
            )
            await bot.send_document(
                chat_id=user_id,
                document=types.FSInputFile(item['file_path'], filename=f"{item['name']}.zip"),
                caption=_("üì¶ <b>–í–∞—à –ø–ª–∞–≥–∏–Ω</b>")
            )
        else:
            await bot.send_document(
                chat_id=user_id,
                document=types.FSInputFile(item['file_path'], filename=f"{item['name']}.zip"),
                caption=message_text
            )
        
        await callback.message.edit_text(
            _("‚úÖ <b>–ü–ª–∞–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω!</b>\n"
              "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.")
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–ª–∞–≥–∏–Ω–∞: {e}")
        await callback.message.edit_text(
            _("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–ª–∞–≥–∏–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        )

    # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
    referrer_id = await db.users.get_referrer(user_id)
    if referrer_id:
        ref_bonus = round(item['price'] * (float(config['bot']['ref_percent']) / 100, 2))
        await db.users.update_balance(
            referrer_id,
            ref_bonus,
            f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ {item['name']}",
            operation_type="ref_bonus",
            item_id=item_id
        )
        
        try:
            await bot.send_message(
                referrer_id,
                _("üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {bonus}‚ÇΩ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!").format(bonus=ref_bonus)
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫
    await db.items.increment_purchases(item_id)


async def process_referral_bonus(buyer_id: int, amount: float, description: str, bot: Bot = None):
    """
    –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
    :param buyer_id: ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    :param amount: –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏
    :param description: –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    referrer_id = await db.users.get_referrer(buyer_id)
    
    if not referrer_id:
        return False
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å (15% –æ—Ç —Å—É–º–º—ã)
    ref_bonus = round(amount * (float(config['bot']['ref_percent']) / 100), 2)
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    await db.users.update_balance(referrer_id, ref_bonus, f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: +{amount}‚ÇΩ")
    await db.users.add_ref_income(referrer_id, ref_bonus)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    if bot:
        try:
            await bot.send_message(
                referrer_id,
                _("üí∏ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {bonus}‚ÇΩ\n"
                  "–∑–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!").format(bonus=ref_bonus)
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}")
    
    return True


async def get_usd_to_rub_rate():
    url = "https://api.exchangerate-api.com/v4/latest/USD"  # –ü—Ä–∏–º–µ—Ä API
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            return data['rates']['RUB']