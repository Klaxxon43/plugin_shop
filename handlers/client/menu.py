from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from utils.imports import *
from utils.imports import _
from utils.db_init import *
from database.create import DataBase as DB
from utils.config_loader import config

router = Router()

@router.callback_query(F.data == "back_menu")
async def back_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    user_id = callback.from_user.id
    is_admin = user_id in admins_list
    
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text=_("üß© –ü–ª–∞–≥–∏–Ω—ã"), callback_data="plugins"))
    kb.add(InlineKeyboardButton(text=_("üé© –ü—Ä–æ—Ñ–∏–ª—å"), callback_data="profile"))
    kb.add(InlineKeyboardButton(text=_("üë• –†–µ—Ñ —Å–∏—Å—Ç–µ–º–∞"), callback_data="ref_system"))
    kb.add(InlineKeyboardButton(text=_("‚ÑπÔ∏è –û –Ω–∞—Å"), callback_data="about"))
    
    if is_admin:
        kb.add(InlineKeyboardButton(text=_("üõ† –ê–î–ú–ò–ù–ö–ê"), callback_data="admin_panel"))

    kb.adjust(2, 1, 1, 1)

    try:
        await callback.message.edit_text(
            _("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>"),
            reply_markup=kb.as_markup()
        )
    except:
        await callback.message.delete()
        await callback.message.edit_text(
            _("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>"),
            reply_markup=kb.as_markup()
        )

@router.callback_query(F.data == "profile")
async def profile_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await db.users.get_user(user_id)
    
    if not user:
        await callback.answer(_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"), show_alert=True)
        return
    
    balance = user['balance'] or 0
    rub_balance = user['rub_balance'] or 0
    
    text = _('''
üëÄ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>
                                                  
ü™™ <b>ID:</b> <code>{user_id}</code>
üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance:.2f}</code>
    ''').format(
        premium_status=_("–ï—Å—Ç—å") if callback.from_user.is_premium else _("–ù–µ—Ç—É"),
        reg_time=user['reg_time'],
        user_id=user_id,
        balance=balance,
        rub_balance=rub_balance
    )
    
    await callback.message.edit_text(text, reply_markup=profile_kb())

def profile_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="back_menu")
    return kb.as_markup()









