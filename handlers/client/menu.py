from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from utils.imports import *
from utils.imports import _
from utils.db_init import *
from database.create import DataBase as DB
from utils.config_loader import config

router = Router()

@router.callback_query(F.data == "back_menu")
async def back_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    user_id = callback.from_user.id
    
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text=_("üß© –ü–ª–∞–≥–∏–Ω—ã"), callback_data="plugins"))
    kb.add(InlineKeyboardButton(text=_("üë• –†–µ—Ñ —Å–∏—Å—Ç–µ–º–∞"), callback_data="ref_system"))
    kb.add(InlineKeyboardButton(text=_("‚ÑπÔ∏è –û –Ω–∞—Å"), callback_data="about"))
    
    if user_id in config.admins:
        kb.add(InlineKeyboardButton(text=_("üõ† –ê–î–ú–ò–ù–ö–ê"), callback_data="admin_panel"))
    kb.adjust(1)

    await callback.message.edit_text(
        _("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>"),
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "profile")
async def profile_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer(_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"), show_alert=True)
        return
    
    balance = user['balance'] or 0
    rub_balance = user['rub_balance'] or 0
    
    text = _('''
üëÄ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>
                                     
‚≠êÔ∏è <b>TG Premium:</b> {premium_status}
üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> <em>{reg_time}</em>                                     
ü™™ <b>ID:</b> <code>{user_id}</code>

üí∞ –ë–∞–ª–∞–Ω—Å $MICO: {balance:.2f} MitCoin
üí≥ –ë–∞–ª–∞–Ω—Å —Ä—É–±: {rub_balance:.2f} ‚ÇΩ
    ''').format(
        premium_status=_("–ï—Å—Ç—å") if callback.from_user.is_premium else _("–ù–µ—Ç—É"),
        reg_time=user['reg_time'],
        user_id=user_id,
        balance=balance,
        rub_balance=rub_balance
    )
    
    await callback.message.edit_text(text, reply_markup=profile_kb())

def profile_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="back_menu"))
    return kb











@router.message(Command("language"))
async def language_command(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru"),
        InlineKeyboardButton(text="üá¨üáß English", callback_data="set_lang_en")
    )
    
    await message.answer(
        _("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:"),
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("set_lang_"))
async def set_language(callback: types.CallbackQuery):
    lang = callback.data.split("_")[-1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.users.update_user(
        user_id=callback.from_user.id,
        language=lang
    )
    
    # –§–æ—Ä—Å–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —è–∑—ã–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    i18n.ctx_locale.set(lang)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    if lang == "en":
        response = "Language changed to English üá¨üáß"
    else:
        response = "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π üá∑üá∫"
    
    await callback.message.edit_text(response)
    await callback.answer()